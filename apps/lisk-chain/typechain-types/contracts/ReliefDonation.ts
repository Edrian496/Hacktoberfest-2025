/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ReliefDonation {
  export type DonorReceiptStruct = {
    donationId: BigNumberish;
    campaignId: BigNumberish;
    amount: BigNumberish;
    timestamp: BigNumberish;
    receiptHash: BytesLike;
  };

  export type DonorReceiptStructOutput = [
    donationId: bigint,
    campaignId: bigint,
    amount: bigint,
    timestamp: bigint,
    receiptHash: string
  ] & {
    donationId: bigint;
    campaignId: bigint;
    amount: bigint;
    timestamp: bigint;
    receiptHash: string;
  };
}

export interface ReliefDonationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "NGO_ROLE"
      | "VERIFIER_ROLE"
      | "campaignCounter"
      | "campaignDisbursements"
      | "campaignMilestoneIndex"
      | "campaignMilestones"
      | "campaigns"
      | "createCampaign"
      | "disburseFunds"
      | "disbursementCounter"
      | "disbursements"
      | "donate"
      | "donationCounter"
      | "donations"
      | "donorReceipts"
      | "donorToCampaigns"
      | "getCampaignDisbursements"
      | "getDonorCampaigns"
      | "getDonorReceipts"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "pause"
      | "paused"
      | "registerNGO"
      | "registerVerifier"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "unpause"
      | "verifyCampaign"
      | "verifyDisbursement"
      | "verifyReceipt"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignCreated"
      | "CampaignVerified"
      | "DisbursementVerified"
      | "DonationReceived"
      | "FundsDisbursed"
      | "Paused"
      | "ReceiptGenerated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NGO_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignDisbursements",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignMilestoneIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignMilestones",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [string, string, BigNumberish, BigNumberish, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "disburseFunds",
    values: [BigNumberish, BigNumberish, AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "disbursementCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disbursements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "donationCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donorReceipts",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donorToCampaigns",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignDisbursements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDonorCampaigns",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDonorReceipts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerNGO",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyDisbursement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyReceipt",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NGO_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignDisbursements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignMilestoneIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disburseFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disbursementCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disbursements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donationCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donations", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donorReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donorToCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignDisbursements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonorCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonorReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerNGO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyDisbursement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyReceipt",
    data: BytesLike
  ): Result;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    name: string,
    ngo: AddressLike
  ];
  export type OutputTuple = [campaignId: bigint, name: string, ngo: string];
  export interface OutputObject {
    campaignId: bigint;
    name: string;
    ngo: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignVerifiedEvent {
  export type InputTuple = [campaignId: BigNumberish, verifier: AddressLike];
  export type OutputTuple = [campaignId: bigint, verifier: string];
  export interface OutputObject {
    campaignId: bigint;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisbursementVerifiedEvent {
  export type InputTuple = [
    disbursementId: BigNumberish,
    verifier: AddressLike
  ];
  export type OutputTuple = [disbursementId: bigint, verifier: string];
  export interface OutputObject {
    disbursementId: bigint;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DonationReceivedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    donor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [campaignId: bigint, donor: string, amount: bigint];
  export interface OutputObject {
    campaignId: bigint;
    donor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDisbursedEvent {
  export type InputTuple = [
    disbursementId: BigNumberish,
    campaignId: BigNumberish,
    amount: BigNumberish,
    purpose: string
  ];
  export type OutputTuple = [
    disbursementId: bigint,
    campaignId: bigint,
    amount: bigint,
    purpose: string
  ];
  export interface OutputObject {
    disbursementId: bigint;
    campaignId: bigint;
    amount: bigint;
    purpose: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceiptGeneratedEvent {
  export type InputTuple = [
    donor: AddressLike,
    donationId: BigNumberish,
    receiptHash: BytesLike
  ];
  export type OutputTuple = [
    donor: string,
    donationId: bigint,
    receiptHash: string
  ];
  export interface OutputObject {
    donor: string;
    donationId: bigint;
    receiptHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReliefDonation extends BaseContract {
  connect(runner?: ContractRunner | null): ReliefDonation;
  waitForDeployment(): Promise<this>;

  interface: ReliefDonationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  NGO_ROLE: TypedContractMethod<[], [string], "view">;

  VERIFIER_ROLE: TypedContractMethod<[], [string], "view">;

  campaignCounter: TypedContractMethod<[], [bigint], "view">;

  campaignDisbursements: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  campaignMilestoneIndex: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  campaignMilestones: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        id: bigint;
        name: string;
        description: string;
        ngoAddress: string;
        targetAmount: bigint;
        raisedAmount: bigint;
        disbursedAmount: bigint;
        startTime: bigint;
        endTime: bigint;
        isVerified: boolean;
        isActive: boolean;
        ipfsMetadata: string;
      }
    ],
    "view"
  >;

  createCampaign: TypedContractMethod<
    [
      _name: string,
      _description: string,
      _targetAmount: BigNumberish,
      _duration: BigNumberish,
      _ipfsMetadata: string,
      _milestones: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  disburseFunds: TypedContractMethod<
    [
      _campaignId: BigNumberish,
      _amount: BigNumberish,
      _recipient: AddressLike,
      _purpose: string,
      _proofOfUse: string
    ],
    [void],
    "nonpayable"
  >;

  disbursementCounter: TypedContractMethod<[], [bigint], "view">;

  disbursements: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, string, bigint, boolean] & {
        campaignId: bigint;
        amount: bigint;
        recipient: string;
        purpose: string;
        proofOfUse: string;
        timestamp: bigint;
        isVerified: boolean;
      }
    ],
    "view"
  >;

  donate: TypedContractMethod<
    [_campaignId: BigNumberish, _message: string],
    [void],
    "payable"
  >;

  donationCounter: TypedContractMethod<[], [bigint], "view">;

  donations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, string] & {
        donor: string;
        campaignId: bigint;
        amount: bigint;
        timestamp: bigint;
        message: string;
      }
    ],
    "view"
  >;

  donorReceipts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, string] & {
        donationId: bigint;
        campaignId: bigint;
        amount: bigint;
        timestamp: bigint;
        receiptHash: string;
      }
    ],
    "view"
  >;

  donorToCampaigns: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getCampaignDisbursements: TypedContractMethod<
    [_campaignId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getDonorCampaigns: TypedContractMethod<
    [_donor: AddressLike],
    [bigint[]],
    "view"
  >;

  getDonorReceipts: TypedContractMethod<
    [_donor: AddressLike],
    [ReliefDonation.DonorReceiptStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registerNGO: TypedContractMethod<[_ngo: AddressLike], [void], "nonpayable">;

  registerVerifier: TypedContractMethod<
    [_verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  verifyCampaign: TypedContractMethod<
    [_campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  verifyDisbursement: TypedContractMethod<
    [_disbursementId: BigNumberish],
    [void],
    "nonpayable"
  >;

  verifyReceipt: TypedContractMethod<
    [_donor: AddressLike, _donationId: BigNumberish, _receiptHash: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NGO_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERIFIER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "campaignCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaignDisbursements"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "campaignMilestoneIndex"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaignMilestones"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        id: bigint;
        name: string;
        description: string;
        ngoAddress: string;
        targetAmount: bigint;
        raisedAmount: bigint;
        disbursedAmount: bigint;
        startTime: bigint;
        endTime: bigint;
        isVerified: boolean;
        isActive: boolean;
        ipfsMetadata: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      _name: string,
      _description: string,
      _targetAmount: BigNumberish,
      _duration: BigNumberish,
      _ipfsMetadata: string,
      _milestones: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disburseFunds"
  ): TypedContractMethod<
    [
      _campaignId: BigNumberish,
      _amount: BigNumberish,
      _recipient: AddressLike,
      _purpose: string,
      _proofOfUse: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disbursementCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "disbursements"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, string, bigint, boolean] & {
        campaignId: bigint;
        amount: bigint;
        recipient: string;
        purpose: string;
        proofOfUse: string;
        timestamp: bigint;
        isVerified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "donate"
  ): TypedContractMethod<
    [_campaignId: BigNumberish, _message: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "donationCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "donations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, string] & {
        donor: string;
        campaignId: bigint;
        amount: bigint;
        timestamp: bigint;
        message: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "donorReceipts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, string] & {
        donationId: bigint;
        campaignId: bigint;
        amount: bigint;
        timestamp: bigint;
        receiptHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "donorToCampaigns"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCampaignDisbursements"
  ): TypedContractMethod<[_campaignId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getDonorCampaigns"
  ): TypedContractMethod<[_donor: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getDonorReceipts"
  ): TypedContractMethod<
    [_donor: AddressLike],
    [ReliefDonation.DonorReceiptStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerNGO"
  ): TypedContractMethod<[_ngo: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerVerifier"
  ): TypedContractMethod<[_verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyCampaign"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyDisbursement"
  ): TypedContractMethod<[_disbursementId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyReceipt"
  ): TypedContractMethod<
    [_donor: AddressLike, _donationId: BigNumberish, _receiptHash: BytesLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignVerified"
  ): TypedContractEvent<
    CampaignVerifiedEvent.InputTuple,
    CampaignVerifiedEvent.OutputTuple,
    CampaignVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "DisbursementVerified"
  ): TypedContractEvent<
    DisbursementVerifiedEvent.InputTuple,
    DisbursementVerifiedEvent.OutputTuple,
    DisbursementVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "DonationReceived"
  ): TypedContractEvent<
    DonationReceivedEvent.InputTuple,
    DonationReceivedEvent.OutputTuple,
    DonationReceivedEvent.OutputObject
  >;
  getEvent(
    key: "FundsDisbursed"
  ): TypedContractEvent<
    FundsDisbursedEvent.InputTuple,
    FundsDisbursedEvent.OutputTuple,
    FundsDisbursedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReceiptGenerated"
  ): TypedContractEvent<
    ReceiptGeneratedEvent.InputTuple,
    ReceiptGeneratedEvent.OutputTuple,
    ReceiptGeneratedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "CampaignCreated(uint256,string,address)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "CampaignVerified(uint256,address)": TypedContractEvent<
      CampaignVerifiedEvent.InputTuple,
      CampaignVerifiedEvent.OutputTuple,
      CampaignVerifiedEvent.OutputObject
    >;
    CampaignVerified: TypedContractEvent<
      CampaignVerifiedEvent.InputTuple,
      CampaignVerifiedEvent.OutputTuple,
      CampaignVerifiedEvent.OutputObject
    >;

    "DisbursementVerified(uint256,address)": TypedContractEvent<
      DisbursementVerifiedEvent.InputTuple,
      DisbursementVerifiedEvent.OutputTuple,
      DisbursementVerifiedEvent.OutputObject
    >;
    DisbursementVerified: TypedContractEvent<
      DisbursementVerifiedEvent.InputTuple,
      DisbursementVerifiedEvent.OutputTuple,
      DisbursementVerifiedEvent.OutputObject
    >;

    "DonationReceived(uint256,address,uint256)": TypedContractEvent<
      DonationReceivedEvent.InputTuple,
      DonationReceivedEvent.OutputTuple,
      DonationReceivedEvent.OutputObject
    >;
    DonationReceived: TypedContractEvent<
      DonationReceivedEvent.InputTuple,
      DonationReceivedEvent.OutputTuple,
      DonationReceivedEvent.OutputObject
    >;

    "FundsDisbursed(uint256,uint256,uint256,string)": TypedContractEvent<
      FundsDisbursedEvent.InputTuple,
      FundsDisbursedEvent.OutputTuple,
      FundsDisbursedEvent.OutputObject
    >;
    FundsDisbursed: TypedContractEvent<
      FundsDisbursedEvent.InputTuple,
      FundsDisbursedEvent.OutputTuple,
      FundsDisbursedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReceiptGenerated(address,uint256,bytes32)": TypedContractEvent<
      ReceiptGeneratedEvent.InputTuple,
      ReceiptGeneratedEvent.OutputTuple,
      ReceiptGeneratedEvent.OutputObject
    >;
    ReceiptGenerated: TypedContractEvent<
      ReceiptGeneratedEvent.InputTuple,
      ReceiptGeneratedEvent.OutputTuple,
      ReceiptGeneratedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
